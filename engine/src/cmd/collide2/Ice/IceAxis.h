///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains axis definition.
 *	\file		IceAxis.h
 *	\author		Pierre Terdiman
 *	\date		January, 29, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Include Guard
#ifndef __ICEAXIS_H__
#define __ICEAXIS_H__
#include "IcePoint.h"
enum PointComponent
{
	_X = 0,
	_Y = 1,
	_Z = 2,
	_W = 3,

	_FORCE_DWORD = 0x7fffffff
};

enum AxisOrder
{
	AXIS_XYZ = (_X) | (_Y << 2) | (_Z << 4),
	AXIS_XZY = (_X) | (_Z << 2) | (_Y << 4),
	AXIS_YXZ = (_Y) | (_X << 2) | (_Z << 4),
	AXIS_YZX = (_Y) | (_Z << 2) | (_X << 4),
	AXIS_ZXY = (_Z) | (_X << 2) | (_Y << 4),
	AXIS_ZYX = (_Z) | (_Y << 2) | (_X << 4),

	AXIS_FORCE_DWORD = 0x7fffffff
};

class Axis
{
public:
	inline Axis(AxisOrder order)
	{
		mAxis0 = (order)&3;
		mAxis1 = (order >> 2) & 3;
		mAxis2 = (order >> 4) & 3;
	}
	inline ~Axis() {}

	uint32_t mAxis0;
	uint32_t mAxis1;
	uint32_t mAxis2;
};

#endif // __ICEAXES_H__
