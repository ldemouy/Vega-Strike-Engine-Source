///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Contains AABB-related code.
 *	\file		IceAABB.cpp
 *	\author		Pierre Terdiman
 *	\date		January, 29, 2000
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	AABB class.
 *	\class		AABB
 *	\author		Pierre Terdiman
 *	\version	1.0
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Precompiled Header
#include "IceAABB.h"
#include "IceTypes.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *	Computes the sum of two AABBs.
 *	\param		aabb	[in] the other AABB
 *	\return		Self-Reference
 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AABB &AABB::Add(const AABB &aabb)
{
	// Compute new min & max values
	Point Min;
	GetMin(Min);
	Point Tmp;
	aabb.GetMin(Tmp);
	Min.Min(Tmp);

	Point Max;
	GetMax(Max);
	aabb.GetMax(Tmp);
	Max.Max(Tmp);

	// Update this
	SetMinMax(Min, Max);
	return *this;
}

// ===========================================================================
//  (C) 1996-98 Vienna University of Technology
// ===========================================================================
//  NAME:       bboxarea
//  TYPE:       c++ code
//  PROJECT:    Bounding Box Area
//  CONTENT:    Computes area of 2D projection of 3D oriented bounding box
//  VERSION:    1.0
// ===========================================================================
//  AUTHORS:    ds      Dieter Schmalstieg
//              ep      Erik Pojar
// ===========================================================================
//  HISTORY:
//
//  19-sep-99 15:23:03  ds      last modification
//  01-dec-98 15:23:03  ep      created
// ===========================================================================

//----------------------------------------------------------------------------
// SAMPLE CODE STARTS HERE
//----------------------------------------------------------------------------

// NOTE: This sample program requires OPEN INVENTOR!

//indexlist: this table stores the 64 possible cases of classification of
//the eyepoint with respect to the 6 defining planes of the bbox (2^6=64)
//only 26 (3^3-1, where 1 is "inside" cube) of these cases are valid.
//the first 6 numbers in each row are the indices of the bbox vertices that
//form the outline of which we want to compute the area (counterclockwise
//ordering), the 7th entry means the number of vertices in the outline.
//there are 6 cases with a single face and and a 4-vertex outline, and
//20 cases with 2 or 3 faces and a 6-vertex outline. a value of 0 indicates
//an invalid case.

// Original list was made of 7 items, I added an 8th element:
// - to padd on a cache line
// - to repeat the first entry to avoid modulos
//
// I also replaced original ints with sbytes.

static const int8_t gIndexList[64][8] =
	{
		{-1, -1, -1, -1, -1, -1, -1, 0}, // 0 inside
		{0, 4, 7, 3, 0, -1, -1, 4},		 // 1 left
		{1, 2, 6, 5, 1, -1, -1, 4},		 // 2 right
		{-1, -1, -1, -1, -1, -1, -1, 0}, // 3 -
		{0, 1, 5, 4, 0, -1, -1, 4},		 // 4 bottom
		{0, 1, 5, 4, 7, 3, 0, 6},		 // 5 bottom, left
		{0, 1, 2, 6, 5, 4, 0, 6},		 // 6 bottom, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, // 7 -
		{2, 3, 7, 6, 2, -1, -1, 4},		 // 8 top
		{0, 4, 7, 6, 2, 3, 0, 6},		 // 9 top, left
		{1, 2, 3, 7, 6, 5, 1, 6},		 //10 top, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //11 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //12 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //13 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //14 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //15 -
		{0, 3, 2, 1, 0, -1, -1, 4},		 //16 front
		{0, 4, 7, 3, 2, 1, 0, 6},		 //17 front, left
		{0, 3, 2, 6, 5, 1, 0, 6},		 //18 front, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //19 -
		{0, 3, 2, 1, 5, 4, 0, 6},		 //20 front, bottom
		{1, 5, 4, 7, 3, 2, 1, 6},		 //21 front, bottom, left
		{0, 3, 2, 6, 5, 4, 0, 6},		 //22 front, bottom, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //23 -
		{0, 3, 7, 6, 2, 1, 0, 6},		 //24 front, top
		{0, 4, 7, 6, 2, 1, 0, 6},		 //25 front, top, left
		{0, 3, 7, 6, 5, 1, 0, 6},		 //26 front, top, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //27 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //28 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //29 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //30 -
		{-1, -1, -1, -1, -1, -1, -1, 0}, //31 -
		{4, 5, 6, 7, 4, -1, -1, 4},		 //32 back
		{0, 4, 5, 6, 7, 3, 0, 6},		 //33 back, left
		{1, 2, 6, 7, 4, 5, 1, 6},		 //34 back, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //35 -
		{0, 1, 5, 6, 7, 4, 0, 6},		 //36 back, bottom
		{0, 1, 5, 6, 7, 3, 0, 6},		 //37 back, bottom, left
		{0, 1, 2, 6, 7, 4, 0, 6},		 //38 back, bottom, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //39 -
		{2, 3, 7, 4, 5, 6, 2, 6},		 //40 back, top
		{0, 4, 5, 6, 2, 3, 0, 6},		 //41 back, top, left
		{1, 2, 3, 7, 4, 5, 1, 6},		 //42 back, top, right
		{-1, -1, -1, -1, -1, -1, -1, 0}, //43 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //44 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //45 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //46 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //47 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //48 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //49 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //50 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //51 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //52 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //53 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //54 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //55 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //56 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //57 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //58 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //59 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //60 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //61 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}, //62 invalid
		{-1, -1, -1, -1, -1, -1, -1, 0}	 //63 invalid
};